---
# tasks file for docker-artifactory

# https://github.com/JFrogDev/artifactory-docker-examples/tree/master/docker-compose

- name: create the xray folders for 1035
  become: yes
  file:
    path: "{{ docker_jfrog_xray_data }}/{{ item }}"
    state: directory
    mode: 0700
    owner: "1035"
    group: "1035"
    recurse: yes
  with_items:
    - var/data
    - var/etc

- name: create the xray folders for 999
  become: yes
  file:
    path: "{{ docker_jfrog_xray_data }}/{{ item }}"
    state: directory
    mode: 0700
    owner: "999"
    group: "999"
    recurse: yes
  with_items:
    - app/third-party/rabbitmq

- name: create the docker_compose folder
  become: yes
  file:
    path: "{{ docker_jfrog_xray_docker_compose_folder }}"
    state: directory
    mode: 0740
    recurse: yes

- name: copy the docker-compose.yml file
  become: yes
  template:
    src: "templates/docker-compose.yml"
    dest: "{{ docker_jfrog_xray_docker_compose_folder }}/docker-compose.yml"
    mode: 0700
    owner: root
    group: root

- name: pull the postgres docker image
  become: yes
  docker_image:
    name: "{{ docker_jfrog_xray_docker }}/postgres:{{ docker_jfrog_xray_tag_jfrog_postgres }}"
    source: pull
  register: docker_jfrog_xray_postgresql_pull_result

# Normally, when using docker-compose, I would let the compose spin up the containers all at once. It's easier that way.
# Unfortunately, starting from Xray 3.8.x, PostgreSQL needs to be started before starting the other services.
# So let's start it first by default from now on, not caring what version of Artifactory we're using.

- name: stop everything but postgres
  become: yes
  ansible.builtin.shell:
    cmd: docker-compose stop {{ docker_jfrog_xray_docker_compose_not_postgres }}
    chdir: "{{ docker_jfrog_xray_docker_compose_folder }}"
    executable: /bin/bash
  when: docker_jfrog_xray_postgresql_pull_result.changed

- name: get info on postgresql container
  become: yes
  community.general.docker_container_info:
    name: postgresql
  register: docker_jfrog_xray_postgresql_container_result

- name: run the postgres export and import
  include_tasks: postgresql_migrate.yml
  # Whether the user entered "yes" as a string or yes as a bool, this will ensure it gets evaluated correctly.
  when: docker_jfrog_xray_postgresql_container_result.exists and (docker_jfrog_xray_postgresql_pull_result.changed or docker_jfrog_xray_postgresql_migrate | bool)

- name: bring up the docker instance for postgresql
  become: yes
  ansible.builtin.shell:
    cmd: docker-compose start {{ docker_jfrog_xray_docker_compose_postgres_container_name }}
    chdir: "{{ docker_jfrog_xray_docker_compose_folder }}"
    executable: /bin/bash
  register: docker_jfrog_xray_compose_postgresql_result

- name: wait 15 seconds to ensure the postgresql container is up
  pause:
    seconds: 15

- name: bring up the all the docker containers
  become: yes
  ansible.builtin.shell:
    cmd: docker-compose start
    chdir: "{{ docker_jfrog_xray_docker_compose_folder }}"
    executable: /bin/bash

- name: delete the docker-compose as it has secrets
  become: yes
  file:
    path: "{{ docker_jfrog_xray_docker_compose_folder }}"
    state: absent